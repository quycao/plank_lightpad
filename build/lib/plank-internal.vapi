/* plank-internal.vapi generated by valac 0.48.17, do not modify. */

namespace Plank {
	[CCode (cheader_filename = "plank-internal.h")]
	public class DockletViewModel : GLib.Object, Gtk.TreeModel, Gtk.TreeDragSource {
		public enum Column {
			ID,
			NAME,
			DESCRIPTION,
			ICON,
			PIXBUF,
			N_COLUMNS
		}
		public DockletViewModel ();
		public void add (string id, string name, string descpription, string icon, Gdk.Pixbuf pixbuf);
	}
	[CCode (cheader_filename = "plank-internal.h")]
	public class Matcher : GLib.Object {
		public Gee.ArrayList<Bamf.Application> active_launchers ();
		public Bamf.Application? app_for_uri (string uri);
		public static Plank.Matcher get_default ();
		public void set_favorites (Gee.ArrayList<string> favs);
		public signal void active_application_changed (Bamf.Application? old_app, Bamf.Application? new_app);
		public signal void active_window_changed (Bamf.Window? old_win, Bamf.Window? new_win);
		public signal void application_closed (Bamf.Application app);
		public signal void application_opened (Bamf.Application app);
		public signal void window_closed (Bamf.Window w);
		public signal void window_opened (Bamf.Window w);
	}
	[CCode (cheader_filename = "plank-internal.h")]
	public class WindowControl : GLib.Object {
		public const uint VIEWPORT_CHANGE_DELAY;
		public const uint WINDOW_GROUP_DELAY;
		public static void close_all (Bamf.Application app, uint32 event_time);
		public static void focus_next (Bamf.Application app, uint32 event_time);
		public static void focus_previous (Bamf.Application app, uint32 event_time);
		public static void focus_window (Bamf.Window window, uint32 event_time);
		public static unowned Gdk.Pixbuf? get_app_icon (Bamf.Application app);
		public static Gdk.Rectangle get_easy_geometry (Wnck.Window w);
		public static GLib.List<weak Wnck.Window> get_ordered_window_stack (Bamf.Application app);
		public static unowned Gdk.Pixbuf? get_window_icon (Bamf.Window window);
		public static bool has_maximized_window (Bamf.Application app);
		public static bool has_minimized_window (Bamf.Application app);
		public static bool has_window_on_workspace (Bamf.Application app, Wnck.Workspace workspace);
		public static void initialize ();
		public static void maximize (Bamf.Application app);
		public static void minimize (Bamf.Application app);
		public static void restore (Bamf.Application app, uint32 event_time);
		public static void smart_focus (Bamf.Application app, uint32 event_time);
		public static void unmaximize (Bamf.Application app);
		public static void update_icon_regions (Bamf.Application app, Gdk.Rectangle rect);
	}
	[CCode (cheader_filename = "plank-internal.h")]
	public enum Struts {
		LEFT,
		RIGHT,
		TOP,
		BOTTOM,
		LEFT_START,
		LEFT_END,
		RIGHT_START,
		RIGHT_END,
		TOP_START,
		TOP_END,
		BOTTOM_START,
		BOTTOM_END,
		N_VALUES
	}
	[CCode (cheader_filename = "plank-internal.h")]
	public static GLib.Quark quark_surface_stats;
	[CCode (cheader_filename = "plank-internal.h")]
	public const string DOCKLET_URI_PREFIX;
	[CCode (cheader_filename = "plank-internal.h")]
	public const uint DOCK_ZOOM_DURATION;
	[CCode (cheader_filename = "plank-internal.h")]
	public const uint FOLDER_MAX_FILE_COUNT;
	[CCode (cheader_filename = "plank-internal.h")]
	public const uint ITEM_HOVER_DURATION;
	[CCode (cheader_filename = "plank-internal.h")]
	public const uint ITEM_INVALID_DURATION;
	[CCode (cheader_filename = "plank-internal.h")]
	public const uint ITEM_SCROLL_DURATION;
	[CCode (cheader_filename = "plank-internal.h")]
	public const uint ITEM_SERIALIZATION_DELAY;
	[CCode (cheader_filename = "plank-internal.h")]
	public const uint LAUNCHER_DIR_MAX_FILE_COUNT;
	[CCode (cheader_filename = "plank-internal.h")]
	public const string SURFACE_STATS_DRAWING_TIME_EXCEEDED;
	[CCode (cheader_filename = "plank-internal.h")]
	public const uint UNITY_UPDATE_THRESHOLD_DURATION;
	[CCode (cheader_filename = "plank-internal.h")]
	public const uint UNITY_UPDATE_THRESHOLD_FAST_COUNT;
	[CCode (cheader_filename = "plank-internal.h")]
	public static GLib.Settings create_settings (string schema_id, string? path = null);
	[CCode (cheader_filename = "plank-internal.h")]
	public static bool file_is_dockitem (GLib.File file);
	[CCode (cheader_filename = "plank-internal.h")]
	public static void internal_quarks_initialize ();
	[CCode (cheader_filename = "plank-internal.h")]
	public static double nround (double d, uint n);
	[CCode (cheader_filename = "plank-internal.h")]
	public static string[] string_split_combine (string s, string delimiter = " ");
	[CCode (cheader_filename = "plank-internal.h")]
	public static GLib.Settings? try_create_settings (string schema_id, string? path = null);
}
