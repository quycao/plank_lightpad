/* docklet-lightpad.vapi generated by valac 0.48.17, do not modify. */

namespace Docky {
	[CCode (cheader_filename = "docklet-lightpad.h")]
	public class LightpadDockItem : Plank.DockletItem {
		public LightpadDockItem ();
		protected override Plank.AnimationType on_clicked (Plank.PopupButton button, Gdk.ModifierType mod, uint32 event_time);
		public LightpadDockItem.with_dockitem_file (GLib.File file);
	}
	[CCode (cheader_filename = "docklet-lightpad.h")]
	public class LightpadDocklet : GLib.Object, Plank.Docklet {
		public LightpadDocklet ();
	}
}
namespace LightPad {
	namespace Backend {
		[CCode (cheader_filename = "docklet-lightpad.h")]
		public class DesktopEntries : GLib.Object {
			public DesktopEntries ();
			public static void enumerate_apps (Gee.HashMap<string,Gdk.Pixbuf> icons, int icon_size, string user_home, out Gee.ArrayList<Gee.HashMap<string,string>> list);
		}
	}
	namespace Frontend {
		[CCode (cheader_filename = "docklet-lightpad.h")]
		public class AppItem : Gtk.EventBox {
			public AppItem (int size, double font_size, int box_width, int box_height);
			public void change_app (Gdk.Pixbuf new_icon, string new_name, string new_tooltip);
			public new void focus_in ();
			public new void focus_out ();
		}
		[CCode (cheader_filename = "docklet-lightpad.h")]
		public class Indicators : Gtk.HBox {
			public int active;
			public new GLib.List<Gtk.Widget> children;
			public Indicators ();
			public void append (string thelabel);
			public void change_focus ();
			protected bool draw_background (Gtk.Widget widget, Cairo.Context ctx);
			public void set_active (int index);
			public void set_active_no_signal (int index);
			public signal void child_activated ();
		}
		[CCode (cheader_filename = "docklet-lightpad.h")]
		public class Searchbar : Gtk.Box {
			public string hint_string;
			public Gtk.Label label;
			public Gtk.Image search_icon;
			public Searchbar (string hint);
			public void hint ();
			public void unhint ();
			public string text { owned get; set; }
			public signal void changed ();
		}
		[CCode (cheader_filename = "docklet-lightpad.h")]
		public struct Color {
			public double R;
			public double G;
			public double B;
			public double A;
			public Color (double R, double G, double B, double A);
			public LightPad.Frontend.Color multiply_sat (double amount);
			public LightPad.Frontend.Color set_val (double val);
		}
	}
}
namespace Resources {
	[CCode (cheader_filename = "docklet-lightpad.h")]
	public const string BLACKLIST_FILE;
	[CCode (cheader_filename = "docklet-lightpad.h")]
	public const string CONFIG_FILE;
	[CCode (cheader_filename = "docklet-lightpad.h")]
	public const string LIGHTPAD_CONFIG_DIR;
}
namespace Widgets {
	[CCode (cheader_filename = "docklet-lightpad.h")]
	public class CompositedWindow : Gtk.Window {
		public CompositedWindow ();
		public bool clear_background (Gtk.Widget widget, Cairo.Context ctx);
	}
}
[CCode (cheader_filename = "docklet-lightpad.h")]
public class LightPadWindow : Widgets.CompositedWindow {
	public int SCROLL_SENSITIVITY;
	public Gee.ArrayList<Gee.HashMap<string,string>> apps;
	public GLib.List<LightPad.Frontend.AppItem> children;
	public bool dynamic_background;
	public double factor_scaling;
	public string file_jpg;
	public string file_png;
	public Gee.ArrayList<Gee.HashMap<string,string>> filtered;
	public double font_size;
	public Gtk.Grid grid;
	public int icon_size;
	public Gee.HashMap<string,Gdk.Pixbuf> icons;
	public Gdk.Pixbuf image_pf;
	public Cairo.ImageSurface image_sf;
	public int item_box_height;
	public int item_box_width;
	public Gdk.Rectangle monitor_dimensions;
	public LightPad.Frontend.Indicators pages;
	public Gtk.Box pages_wrapper;
	public Cairo.Pattern pattern;
	public int scroll_times;
	public LightPad.Frontend.Searchbar searchbar;
	public Gtk.Box top_spacer;
	public int total_pages;
	public static string user_home;
	public bool wasShowed;
	public LightPadWindow ();
	public new void destroy ();
	public override bool key_press_event (Gdk.EventKey event);
	public void refresh_apps ();
	public override bool scroll_event (Gdk.EventScroll event);
}
[CCode (cheader_filename = "docklet-lightpad.h")]
public static void docklet_init (Plank.DockletManager manager);
