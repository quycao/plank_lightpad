/* docklet-lightpad.h generated by valac 0.48.17, the Vala compiler, do not modify */

#ifndef __DOCKLETS_LIGHTPAD_DOCKLET_LIGHTPAD_H__
#define __DOCKLETS_LIGHTPAD_DOCKLET_LIGHTPAD_H__

#include "plank.h"
#include <glib-object.h>
#include <gio/gio.h>
#include <gtk/gtk.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <float.h>
#include <math.h>
#include <gdk/gdk.h>
#include <cairo-gobject.h>

G_BEGIN_DECLS

#define DOCKY_TYPE_LIGHTPAD_DOCK_ITEM (docky_lightpad_dock_item_get_type ())
#define DOCKY_LIGHTPAD_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DOCKY_TYPE_LIGHTPAD_DOCK_ITEM, DockyLightpadDockItem))
#define DOCKY_LIGHTPAD_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DOCKY_TYPE_LIGHTPAD_DOCK_ITEM, DockyLightpadDockItemClass))
#define DOCKY_IS_LIGHTPAD_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DOCKY_TYPE_LIGHTPAD_DOCK_ITEM))
#define DOCKY_IS_LIGHTPAD_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DOCKY_TYPE_LIGHTPAD_DOCK_ITEM))
#define DOCKY_LIGHTPAD_DOCK_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DOCKY_TYPE_LIGHTPAD_DOCK_ITEM, DockyLightpadDockItemClass))

typedef struct _DockyLightpadDockItem DockyLightpadDockItem;
typedef struct _DockyLightpadDockItemClass DockyLightpadDockItemClass;
typedef struct _DockyLightpadDockItemPrivate DockyLightpadDockItemPrivate;

#define DOCKY_TYPE_LIGHTPAD_DOCKLET (docky_lightpad_docklet_get_type ())
#define DOCKY_LIGHTPAD_DOCKLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DOCKY_TYPE_LIGHTPAD_DOCKLET, DockyLightpadDocklet))
#define DOCKY_LIGHTPAD_DOCKLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DOCKY_TYPE_LIGHTPAD_DOCKLET, DockyLightpadDockletClass))
#define DOCKY_IS_LIGHTPAD_DOCKLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DOCKY_TYPE_LIGHTPAD_DOCKLET))
#define DOCKY_IS_LIGHTPAD_DOCKLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DOCKY_TYPE_LIGHTPAD_DOCKLET))
#define DOCKY_LIGHTPAD_DOCKLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DOCKY_TYPE_LIGHTPAD_DOCKLET, DockyLightpadDockletClass))

typedef struct _DockyLightpadDocklet DockyLightpadDocklet;
typedef struct _DockyLightpadDockletClass DockyLightpadDockletClass;
typedef struct _DockyLightpadDockletPrivate DockyLightpadDockletPrivate;

#define WIDGETS_TYPE_COMPOSITED_WINDOW (widgets_composited_window_get_type ())
#define WIDGETS_COMPOSITED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_COMPOSITED_WINDOW, WidgetsCompositedWindow))
#define WIDGETS_COMPOSITED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_COMPOSITED_WINDOW, WidgetsCompositedWindowClass))
#define WIDGETS_IS_COMPOSITED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_COMPOSITED_WINDOW))
#define WIDGETS_IS_COMPOSITED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_COMPOSITED_WINDOW))
#define WIDGETS_COMPOSITED_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_COMPOSITED_WINDOW, WidgetsCompositedWindowClass))

typedef struct _WidgetsCompositedWindow WidgetsCompositedWindow;
typedef struct _WidgetsCompositedWindowClass WidgetsCompositedWindowClass;
typedef struct _WidgetsCompositedWindowPrivate WidgetsCompositedWindowPrivate;

#define TYPE_LIGHT_PAD_WINDOW (light_pad_window_get_type ())
#define LIGHT_PAD_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LIGHT_PAD_WINDOW, LightPadWindow))
#define LIGHT_PAD_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LIGHT_PAD_WINDOW, LightPadWindowClass))
#define IS_LIGHT_PAD_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LIGHT_PAD_WINDOW))
#define IS_LIGHT_PAD_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LIGHT_PAD_WINDOW))
#define LIGHT_PAD_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LIGHT_PAD_WINDOW, LightPadWindowClass))

typedef struct _LightPadWindow LightPadWindow;
typedef struct _LightPadWindowClass LightPadWindowClass;
typedef struct _LightPadWindowPrivate LightPadWindowPrivate;

#define LIGHT_PAD_FRONTEND_TYPE_INDICATORS (light_pad_frontend_indicators_get_type ())
#define LIGHT_PAD_FRONTEND_INDICATORS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LIGHT_PAD_FRONTEND_TYPE_INDICATORS, LightPadFrontendIndicators))
#define LIGHT_PAD_FRONTEND_INDICATORS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LIGHT_PAD_FRONTEND_TYPE_INDICATORS, LightPadFrontendIndicatorsClass))
#define LIGHT_PAD_FRONTEND_IS_INDICATORS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LIGHT_PAD_FRONTEND_TYPE_INDICATORS))
#define LIGHT_PAD_FRONTEND_IS_INDICATORS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LIGHT_PAD_FRONTEND_TYPE_INDICATORS))
#define LIGHT_PAD_FRONTEND_INDICATORS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LIGHT_PAD_FRONTEND_TYPE_INDICATORS, LightPadFrontendIndicatorsClass))

typedef struct _LightPadFrontendIndicators LightPadFrontendIndicators;
typedef struct _LightPadFrontendIndicatorsClass LightPadFrontendIndicatorsClass;

#define LIGHT_PAD_FRONTEND_TYPE_APP_ITEM (light_pad_frontend_app_item_get_type ())
#define LIGHT_PAD_FRONTEND_APP_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LIGHT_PAD_FRONTEND_TYPE_APP_ITEM, LightPadFrontendAppItem))
#define LIGHT_PAD_FRONTEND_APP_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LIGHT_PAD_FRONTEND_TYPE_APP_ITEM, LightPadFrontendAppItemClass))
#define LIGHT_PAD_FRONTEND_IS_APP_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LIGHT_PAD_FRONTEND_TYPE_APP_ITEM))
#define LIGHT_PAD_FRONTEND_IS_APP_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LIGHT_PAD_FRONTEND_TYPE_APP_ITEM))
#define LIGHT_PAD_FRONTEND_APP_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LIGHT_PAD_FRONTEND_TYPE_APP_ITEM, LightPadFrontendAppItemClass))

typedef struct _LightPadFrontendAppItem LightPadFrontendAppItem;
typedef struct _LightPadFrontendAppItemClass LightPadFrontendAppItemClass;

#define LIGHT_PAD_FRONTEND_TYPE_SEARCHBAR (light_pad_frontend_searchbar_get_type ())
#define LIGHT_PAD_FRONTEND_SEARCHBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LIGHT_PAD_FRONTEND_TYPE_SEARCHBAR, LightPadFrontendSearchbar))
#define LIGHT_PAD_FRONTEND_SEARCHBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LIGHT_PAD_FRONTEND_TYPE_SEARCHBAR, LightPadFrontendSearchbarClass))
#define LIGHT_PAD_FRONTEND_IS_SEARCHBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LIGHT_PAD_FRONTEND_TYPE_SEARCHBAR))
#define LIGHT_PAD_FRONTEND_IS_SEARCHBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LIGHT_PAD_FRONTEND_TYPE_SEARCHBAR))
#define LIGHT_PAD_FRONTEND_SEARCHBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LIGHT_PAD_FRONTEND_TYPE_SEARCHBAR, LightPadFrontendSearchbarClass))

typedef struct _LightPadFrontendSearchbar LightPadFrontendSearchbar;
typedef struct _LightPadFrontendSearchbarClass LightPadFrontendSearchbarClass;

#define LIGHT_PAD_FRONTEND_TYPE_COLOR (light_pad_frontend_color_get_type ())
typedef struct _LightPadFrontendColor LightPadFrontendColor;

#define LIGHT_PAD_BACKEND_TYPE_DESKTOP_ENTRIES (light_pad_backend_desktop_entries_get_type ())
#define LIGHT_PAD_BACKEND_DESKTOP_ENTRIES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LIGHT_PAD_BACKEND_TYPE_DESKTOP_ENTRIES, LightPadBackendDesktopEntries))
#define LIGHT_PAD_BACKEND_DESKTOP_ENTRIES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LIGHT_PAD_BACKEND_TYPE_DESKTOP_ENTRIES, LightPadBackendDesktopEntriesClass))
#define LIGHT_PAD_BACKEND_IS_DESKTOP_ENTRIES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LIGHT_PAD_BACKEND_TYPE_DESKTOP_ENTRIES))
#define LIGHT_PAD_BACKEND_IS_DESKTOP_ENTRIES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LIGHT_PAD_BACKEND_TYPE_DESKTOP_ENTRIES))
#define LIGHT_PAD_BACKEND_DESKTOP_ENTRIES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LIGHT_PAD_BACKEND_TYPE_DESKTOP_ENTRIES, LightPadBackendDesktopEntriesClass))

typedef struct _LightPadBackendDesktopEntries LightPadBackendDesktopEntries;
typedef struct _LightPadBackendDesktopEntriesClass LightPadBackendDesktopEntriesClass;
typedef struct _LightPadBackendDesktopEntriesPrivate LightPadBackendDesktopEntriesPrivate;
typedef struct _LightPadFrontendAppItemPrivate LightPadFrontendAppItemPrivate;
typedef struct _LightPadFrontendIndicatorsPrivate LightPadFrontendIndicatorsPrivate;
typedef struct _LightPadFrontendSearchbarPrivate LightPadFrontendSearchbarPrivate;

struct _DockyLightpadDockItem {
	PlankDockletItem parent_instance;
	DockyLightpadDockItemPrivate * priv;
};

struct _DockyLightpadDockItemClass {
	PlankDockletItemClass parent_class;
};

struct _DockyLightpadDocklet {
	GObject parent_instance;
	DockyLightpadDockletPrivate * priv;
};

struct _DockyLightpadDockletClass {
	GObjectClass parent_class;
};

struct _WidgetsCompositedWindow {
	GtkWindow parent_instance;
	WidgetsCompositedWindowPrivate * priv;
};

struct _WidgetsCompositedWindowClass {
	GtkWindowClass parent_class;
};

struct _LightPadWindow {
	WidgetsCompositedWindow parent_instance;
	LightPadWindowPrivate * priv;
	GeeArrayList* apps;
	GeeHashMap* icons;
	GeeArrayList* filtered;
	LightPadFrontendIndicators* pages;
	GtkBox* pages_wrapper;
	gdouble font_size;
	gint icon_size;
	gint item_box_width;
	gint item_box_height;
	gint total_pages;
	gint scroll_times;
	gint SCROLL_SENSITIVITY;
	GdkRectangle monitor_dimensions;
	GtkBox* top_spacer;
	GList* children;
	LightPadFrontendSearchbar* searchbar;
	GtkGrid* grid;
	gboolean dynamic_background;
	gdouble factor_scaling;
	gchar* file_png;
	gchar* file_jpg;
	cairo_pattern_t* pattern;
	cairo_surface_t* image_sf;
	GdkPixbuf* image_pf;
	gboolean wasShowed;
};

struct _LightPadWindowClass {
	WidgetsCompositedWindowClass parent_class;
};

struct _LightPadFrontendColor {
	gdouble R;
	gdouble G;
	gdouble B;
	gdouble A;
};

struct _LightPadBackendDesktopEntries {
	GObject parent_instance;
	LightPadBackendDesktopEntriesPrivate * priv;
};

struct _LightPadBackendDesktopEntriesClass {
	GObjectClass parent_class;
};

struct _LightPadFrontendAppItem {
	GtkEventBox parent_instance;
	LightPadFrontendAppItemPrivate * priv;
};

struct _LightPadFrontendAppItemClass {
	GtkEventBoxClass parent_class;
};

struct _LightPadFrontendIndicators {
	GtkHBox parent_instance;
	LightPadFrontendIndicatorsPrivate * priv;
	GList* children;
	gint active;
};

struct _LightPadFrontendIndicatorsClass {
	GtkHBoxClass parent_class;
};

struct _LightPadFrontendSearchbar {
	GtkBox parent_instance;
	LightPadFrontendSearchbarPrivate * priv;
	GtkLabel* label;
	GtkImage* search_icon;
	gchar* hint_string;
};

struct _LightPadFrontendSearchbarClass {
	GtkBoxClass parent_class;
};

GType docky_lightpad_dock_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DockyLightpadDockItem, g_object_unref)
DockyLightpadDockItem* docky_lightpad_dock_item_new_with_dockitem_file (GFile* file);
DockyLightpadDockItem* docky_lightpad_dock_item_construct_with_dockitem_file (GType object_type,
                                                                              GFile* file);
DockyLightpadDockItem* docky_lightpad_dock_item_new (void);
DockyLightpadDockItem* docky_lightpad_dock_item_construct (GType object_type);
void docklet_init (PlankDockletManager* manager);
GType docky_lightpad_docklet_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DockyLightpadDocklet, g_object_unref)
DockyLightpadDocklet* docky_lightpad_docklet_new (void);
DockyLightpadDocklet* docky_lightpad_docklet_construct (GType object_type);
GType widgets_composited_window_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (WidgetsCompositedWindow, g_object_unref)
GType light_pad_window_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LightPadWindow, g_object_unref)
GType light_pad_frontend_indicators_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LightPadFrontendIndicators, g_object_unref)
GType light_pad_frontend_app_item_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LightPadFrontendAppItem, g_object_unref)
GType light_pad_frontend_searchbar_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LightPadFrontendSearchbar, g_object_unref)
extern gchar* light_pad_window_user_home;
LightPadWindow* light_pad_window_new (void);
LightPadWindow* light_pad_window_construct (GType object_type);
void light_pad_window_destroy (LightPadWindow* self);
void light_pad_window_refresh_apps (LightPadWindow* self);
GType light_pad_frontend_color_get_type (void) G_GNUC_CONST;
LightPadFrontendColor* light_pad_frontend_color_dup (const LightPadFrontendColor* self);
void light_pad_frontend_color_free (LightPadFrontendColor* self);
void light_pad_frontend_color_init (LightPadFrontendColor *self,
                                    gdouble R,
                                    gdouble G,
                                    gdouble B,
                                    gdouble A);
void light_pad_frontend_color_set_val (LightPadFrontendColor *self,
                                       gdouble val,
                                       LightPadFrontendColor* result);
void light_pad_frontend_color_multiply_sat (LightPadFrontendColor *self,
                                            gdouble amount,
                                            LightPadFrontendColor* result);
GType light_pad_backend_desktop_entries_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LightPadBackendDesktopEntries, g_object_unref)
void light_pad_backend_desktop_entries_enumerate_apps (GeeHashMap* icons,
                                                       gint icon_size,
                                                       const gchar* user_home,
                                                       GeeArrayList* * list);
LightPadBackendDesktopEntries* light_pad_backend_desktop_entries_new (void);
LightPadBackendDesktopEntries* light_pad_backend_desktop_entries_construct (GType object_type);
#define RESOURCES_LIGHTPAD_CONFIG_DIR "/.lightpad"
#define RESOURCES_BLACKLIST_FILE RESOURCES_LIGHTPAD_CONFIG_DIR "/blacklist"
#define RESOURCES_CONFIG_FILE RESOURCES_LIGHTPAD_CONFIG_DIR "/config"
LightPadFrontendAppItem* light_pad_frontend_app_item_new (gint size,
                                                          gdouble font_size,
                                                          gint box_width,
                                                          gint box_height);
LightPadFrontendAppItem* light_pad_frontend_app_item_construct (GType object_type,
                                                                gint size,
                                                                gdouble font_size,
                                                                gint box_width,
                                                                gint box_height);
void light_pad_frontend_app_item_change_app (LightPadFrontendAppItem* self,
                                             GdkPixbuf* new_icon,
                                             const gchar* new_name,
                                             const gchar* new_tooltip);
void light_pad_frontend_app_item_focus_in (LightPadFrontendAppItem* self);
void light_pad_frontend_app_item_focus_out (LightPadFrontendAppItem* self);
gboolean widgets_composited_window_clear_background (WidgetsCompositedWindow* self,
                                                     GtkWidget* widget,
                                                     cairo_t* ctx);
WidgetsCompositedWindow* widgets_composited_window_new (void);
WidgetsCompositedWindow* widgets_composited_window_construct (GType object_type);
LightPadFrontendIndicators* light_pad_frontend_indicators_new (void);
LightPadFrontendIndicators* light_pad_frontend_indicators_construct (GType object_type);
void light_pad_frontend_indicators_append (LightPadFrontendIndicators* self,
                                           const gchar* thelabel);
void light_pad_frontend_indicators_set_active_no_signal (LightPadFrontendIndicators* self,
                                                         gint index);
void light_pad_frontend_indicators_set_active (LightPadFrontendIndicators* self,
                                               gint index);
void light_pad_frontend_indicators_change_focus (LightPadFrontendIndicators* self);
gboolean light_pad_frontend_indicators_draw_background (LightPadFrontendIndicators* self,
                                                        GtkWidget* widget,
                                                        cairo_t* ctx);
LightPadFrontendSearchbar* light_pad_frontend_searchbar_new (const gchar* hint);
LightPadFrontendSearchbar* light_pad_frontend_searchbar_construct (GType object_type,
                                                                   const gchar* hint);
void light_pad_frontend_searchbar_hint (LightPadFrontendSearchbar* self);
void light_pad_frontend_searchbar_unhint (LightPadFrontendSearchbar* self);
gchar* light_pad_frontend_searchbar_get_text (LightPadFrontendSearchbar* self);
void light_pad_frontend_searchbar_set_text (LightPadFrontendSearchbar* self,
                                            const gchar* value);

G_END_DECLS

#endif
